import java.sql.CallableStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnType;
import org.springframework.jdbc.object.StoredProcedure;
import org.springframework.stereotype.Component;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import oracle.jdbc.OracleTypes;
import oracle.sql.STRUCT;

@Component
public class StoredProcedureRunner implements CommandLineRunner {

	@Autowired DataSource dataSource;

	@Override
	public void run(String... args) throws Exception {
		MyRandomStoredProcedure sproc = new MyRandomStoredProcedure(dataSource);
		Map results = sproc.execute("sp23jlg103");
		System.out.println("map: " + results);
//		printMap(results);
	}

	private static void printMap(Map results) {
		for (Iterator it = results.entrySet().iterator(); it.hasNext();) {
			System.out.println(it.next());
		}
	}

}

class MyRandomStoredProcedure extends StoredProcedure {
	private static final String SPROC_NAME = "fe_random_sp";

	public MyRandomStoredProcedure(DataSource dataSource) {
		super(dataSource, SPROC_NAME);
		declareParameter(new SqlParameter("device_id_in", OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("output", OracleTypes.STRUCT, "FE_RANDOM_SP_TYPE", new SqlReturnType() {
			public Object getTypeValue(CallableStatement cs, int colIndx, int sqlType, String typeName)
					throws SQLException {
				STRUCT struct = (STRUCT) cs.getObject(colIndx);
				Object[] attr = struct.getAttributes();
				Output item = new Output();
				item.setDeviceName((String) attr[0]);
				item.setSerialNumber((String) attr[1]);
				return item;
			}
		}));
		compile();
	}

	public Map execute(String deviceId) {
		HashMap<String, String> map = new HashMap<>();
		map.put("device_id_in", deviceId);
		return super.execute(map);
	}
}

@Data
@ToString
@AllArgsConstructor
@NoArgsConstructor
class Output {
	String deviceName;
	String serialNumber;
}
